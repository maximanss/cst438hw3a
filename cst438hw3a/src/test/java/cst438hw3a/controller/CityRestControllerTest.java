package cst438hw3a.controller;

/**
 * This is a test program to test the CityRestController using Mockito and Jupiter
 *  The CityService will be mocked with a stub. A mock Rest api call to the CityRestController
 *  will be generated by MockHttpServletResponse.
 * 
 * @author Max Halbert
 * @since 2021-05-10
 */

import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.json.JacksonTester;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

import cst438hw3a.domain.CityInfo;
import cst438hw3a.service.CityService;

import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

// class must be annotated as WebMvcTest,  not SpringBootTest
@WebMvcTest(CityRestController.class)
public class CityRestControllerTest {

    // declare as @MockBean those classes which will be stubbed in the test
    // These classes must be Spring components (such as Repositories)
    // or @Service classes.

    @MockBean
    private CityService cityService;

    // This class is used for make simulated HTTP requests to the class
    // being tested.
    @Autowired
    private MockMvc mvc;

    // These objects will be magically initialized by the initFields method below.
    private JacksonTester<CityInfo> jsonCityAttempt;

    // This method is executed before each Test.
    @BeforeEach
    public void setUpEach() {
        MockitoAnnotations.initMocks(this);
        JacksonTester.initFields(this, new ObjectMapper());
    }

    /**
     * This test will check for valid city name
     */
    @Test
    public void test1() throws Exception {

        // this is the stub for the CityService. When given input parm of "TestCity",
        // the stub will return the CityInfo of "TestCity"
        CityInfo cityInfo = new CityInfo(1, "TestCity", "TST", "Test Country", "Test District",
                100000, 80.0, "12:00 AM");
        given(cityService.getCityInfo("TestCity"))
                .willReturn(new ResponseEntity<CityInfo>(cityInfo, HttpStatus.OK));

        // perform the test by making simulated HTTP get using URL of
        // "/api/city/TestCity"
        MockHttpServletResponse response = mvc.perform(get("/api/cities/TestCity")).andReturn()
                .getResponse();

        // verify that result is as expected
        assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());

        System.out.println("Mock Response:" + response.getContentAsString());

        // convert returned data from JSON string format to CityInfo object
        CityInfo cityResult = jsonCityAttempt.parseObject(response.getContentAsString());

        CityInfo expectedResult = new CityInfo(1, "TestCity", "TST", "Test Country",
                "Test District", 100000, 80.0, "12:00 AM");

        // compare actual return data with expected data
        // MUST implement .equals( ) method for CityInfo class.
        assertThat(cityResult).isEqualTo(expectedResult);

    }

    /**
     * This test will check for invalid city name
     */
    @Test
    public void test2() throws Exception {
        given(cityService.getCityInfo("UnknownCity"))
                .willReturn(new ResponseEntity<CityInfo>(HttpStatus.NOT_FOUND));

        // perform the test by making simulated HTTP get using URL of
        // "/api/city/UnknownCity"
        MockHttpServletResponse response = mvc.perform(get("/api/cities/UnknownCity")).andReturn()
                .getResponse();

        // verify that result is as expected
        assertThat(response.getStatus()).isEqualTo(HttpStatus.NOT_FOUND.value());

    }

}
